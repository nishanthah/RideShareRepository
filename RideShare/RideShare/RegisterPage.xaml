<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:RideShare.Behaviors;assembly=RideShare"
             xmlns:converters="clr-namespace:RideShare.Converters;assembly=RideShare"
             x:Class="RideShare.RegisterPage"
             Title="Register">
  <ContentPage.Resources>
    <ResourceDictionary>
      <converters:InverseBooleanConverter x:Key="inverseBooleanConverter"/>
    </ResourceDictionary>

  </ContentPage.Resources>
  <ContentPage.Content>

    <ScrollView Orientation="Vertical" >
      <StackLayout x:Name="vrtStackLayout" Orientation="Vertical">

        <StackLayout x:Name="profileImageStackLayout" Orientation="Vertical">
        </StackLayout>
        <StackLayout Orientation="Horizontal">
          <Entry x:Name="firstNameEntry" Text="{Binding Path=FirstName}" Placeholder="First Name [Required]">
            <Entry.Behaviors>
              <local:RequiredFieldValidatorBehavior x:Name="fNRequiredFieldValidator"/>
            </Entry.Behaviors>
          </Entry>          

          <Entry x:Name="lastNameEntry" Text="{Binding Path=LastName}" Placeholder="Last Name [Required]">
            <Entry.Behaviors>
              <local:RequiredFieldValidatorBehavior x:Name="lNRequiredFieldValidator"/>
            </Entry.Behaviors>
          </Entry>          
        </StackLayout>

        
        <Entry x:Name="userNameEntry" Text="{Binding UserName, Mode=TwoWay}" Placeholder="User Name [Required]">
          <Entry.Style>
            <Style TargetType="Entry">
              <Setter Property="IsEnabled" Value="true" />
              <Style.Triggers>
                <DataTrigger TargetType="Entry" Binding="{Binding isAuthenticated, Mode=TwoWay}" Value="true">
                  <Setter Property="IsEnabled" Value="false" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </Entry.Style>
          <Entry.Behaviors>
            <local:RequiredFieldValidatorBehavior x:Name="uNRequiredFieldValidator"/>
          </Entry.Behaviors>
        </Entry>
        
        <Entry x:Name="passwordEntry" Text="{Binding Password, Mode=TwoWay}" Placeholder="Password [Required]">
          <Entry.Behaviors>
            <local:PasswordValidatorBehavior x:Name="passwordValidator"/>

            <local:RequiredFieldValidatorBehavior x:Name="pwdRequiredFieldValidator"/>

          </Entry.Behaviors>
        </Entry>
        
        <Label Text="{Binding PasswordErrorMessage, Mode=TwoWay}" HorizontalTextAlignment="Start" TextColor="Red" FontAttributes="Bold" IsVisible="{Binding Source={x:Reference passwordValidator},
	                        Path=MessageIsValid, Converter={StaticResource inverseBooleanConverter}}"></Label>

        <Entry x:Name="emailEntry" Text="{Binding Email, Mode=TwoWay}" Placeholder="Email - e.g. example@email.com [Required]" Keyboard="Email">

          <Entry.Behaviors>
            <local:EmailValidatorBehavior x:Name="emailValidator"/>

            <local:RequiredFieldValidatorBehavior x:Name="emailRequiredFieldValidator"/>

          </Entry.Behaviors>

        </Entry>
        
        <Label Text="{Binding EmailAddressErrorMessage, Mode=TwoWay}" HorizontalTextAlignment="Start" TextColor="Red" FontAttributes="Bold" IsVisible="{Binding Source={x:Reference emailValidator},
	                        Path=MessageIsValid, Converter={StaticResource inverseBooleanConverter}}"></Label>

        <StackLayout Orientation="Horizontal">
        <Picker x:Name="countryCodePicker" Title="CountryCode"></Picker>
        <Entry x:Name="mobileNumberEntry" Text="{Binding MobileNumber, Mode=TwoWay}" Placeholder="Mobile Number [Required]" Keyboard="Telephone">
          <Entry.Behaviors>
            <local:RequiredFieldValidatorBehavior x:Name="mobileNumberRequiredFieldValidator"/>            
          </Entry.Behaviors>
        </Entry>
        </StackLayout>
          <Label Text="{Binding MobileNumberErrorMessage, Mode=TwoWay}" HorizontalTextAlignment="Start" TextColor="Red" FontAttributes="Bold" IsVisible="{Binding IsMobileNumberErrorMessageEnabled, Mode=TwoWay}"></Label>
        
        

        <Picker x:Name="genderPicker" Title="Gender"></Picker>

        <StackLayout Orientation="Horizontal" Margin="0, 10, 0, 5">
          <Image Source="add_picture.png" HorizontalOptions="Start" WidthRequest="30">
            <Image.GestureRecognizers>
              <TapGestureRecognizer
                  Command="{Binding TapCommand}" />
            </Image.GestureRecognizers>
          </Image>

          <Label Text="Add Vehicle" FontSize="16">
            <Label.GestureRecognizers>
              <TapGestureRecognizer
                  Command="{Binding TapCommand}" />
            </Label.GestureRecognizers>
          </Label>
        </StackLayout>

        <StackLayout Orientation="Vertical" VerticalOptions="FillAndExpand">
          <ListView x:Name="vehicleListView"  ItemSelected="OnItemSelected" SeparatorVisibility="Default" SeparatorColor="Gray" RowHeight="25">
            <ListView.ItemTemplate>
              <DataTemplate>
                <ViewCell>
                  <Grid>
                    <Label Text="{Binding VehicleDisplayName, Mode=TwoWay}" FontSize="15" />
                  </Grid>
                </ViewCell>
              </DataTemplate>
            </ListView.ItemTemplate>
          </ListView>
        </StackLayout>

        <BoxView HeightRequest="1" HorizontalOptions="FillAndExpand"></BoxView>

        <StackLayout Orientation="Horizontal" Margin="0, 10, 0, 5">
          <Image Source="add_picture.png" HorizontalOptions="Start" WidthRequest="30">
            <Image.GestureRecognizers>
              <TapGestureRecognizer
                  Command="{Binding TapFavsCommand}" />
            </Image.GestureRecognizers>
          </Image>

          <Label Text="Add Favourite Places" FontSize="16">
            <Label.GestureRecognizers>
              <TapGestureRecognizer
                  Command="{Binding TapFavsCommand}" />
            </Label.GestureRecognizers>
          </Label>
        </StackLayout>

        <StackLayout Orientation="Vertical" VerticalOptions="FillAndExpand">
          <ListView x:Name="favPlacesListView" ItemSelected="OnfavItemSelected" SeparatorVisibility="Default" SeparatorColor="Gray" RowHeight="25">
            <ListView.ItemTemplate>
              <DataTemplate>
                <ViewCell>
                  <Grid>
                    <Label Text="{Binding UserGivenplaceName, Mode=TwoWay}" FontSize="15" />
                  </Grid>
                </ViewCell>
              </DataTemplate>
            </ListView.ItemTemplate>
          </ListView>
        </StackLayout>

        <!--<Button x:Name="registerButton" Text="Register" Command="{Binding SignUpCommand}"/>-->
        <Button x:Name="registerButton" Command="{Binding SignUpCommand}" BackgroundColor="#ed910c" IsEnabled="{Binding IsButtonEnabled, Mode=TwoWay}" >
          <Button.Style>
            <Style TargetType="Button">
              <Setter Property="Text" Value="Register"></Setter>
              <Style.Triggers>
                <DataTrigger TargetType="Button" Binding="{Binding isAuthenticated, Mode=TwoWay}" Value="true">
                  <Setter Property="Text" Value="Update"></Setter>
                </DataTrigger  >
              </Style.Triggers>
            </Style>
          </Button.Style>          
        </Button>
        <Label Text="{Binding ErrorMessage, Mode=TwoWay}" HorizontalTextAlignment="Center" TextColor="Red" FontAttributes="Bold"></Label>
        <Label Text="Already have an account? Login" FontSize="13" HorizontalOptions="Center" FontAttributes="Bold" IsVisible="{Binding isAuthenticated, Converter={StaticResource inverseBooleanConverter}}" >
          <Label.GestureRecognizers>
            <TapGestureRecognizer
                Command="{Binding TapCommandLogin}" />
          </Label.GestureRecognizers>
        </Label>

      </StackLayout  >
    </ScrollView>
  </ContentPage.Content>
</ContentPage>