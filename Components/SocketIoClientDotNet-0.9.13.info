{"Name":"Socket.IO Client .NET","Id":2407,"Alias":"SocketIoClientDotNet","Description":"# Socket.IO .NET\r\n\r\nSocket.IO enables real-time bidirectional event-based communication.\r\nIt works on every platform, browser or device, focusing equally on reliability and speed.\r\n\r\n * **Real-time analytics**  \r\n   Push data to clients that gets represented as real-time counters, charts or logs.\r\n * **Instant messaging and chat**  \r\n   Socket.IO\u0027s \"Hello world\" is a chat app in just a few lines of code.\r\n * **Binary streaming**  \r\n   Starting in 1.0, it\u0027s possible to send any blob back and forth: image, audio, video.\r\n * **Document collaboration**  \r\n   Allow users to concurrently edit a document and see each other\u0027s changes.\r\n   \r\n\u003e **USED BY EVERYONE**  \r\n\u003e From Microsoft Office, Yammer, Zendesk, Trello... to hackathon winners and little startups.\r\n\r\n\u003e **IMMENSELY POWERFUL, YET EASY TO USE**  \r\n\u003e Our getting started guide will show you how to create lots of amazing applications in fewer \r\n\u003e than 200 lines of code.\r\n\r\n## Connect to Server\r\n\r\nConnecting to a Socket.IO server is just two lines:\r\n\r\n    // connect to a Socket.IO server\r\n    socket = IO.Socket(\"http://chat.socket.io/\");\r\n    socket.Connect();\r\n    \r\n    // disconnect from the server\r\n    socket.Close();\r\n\r\n## Subscribe to Events\r\n\r\nListening for messages from the server is easy,all we need to do is \r\nattach a delegate to the event name using the `On` method.\r\n\r\nThe `data` received from the http://chat.socket.io/ server is a `JToken` value:\r\n\r\n    // whenever the server emits \"login\", print the login message\r\n    socket.On(\"login\", data =\u003e {\r\n        connected = true;\r\n        \r\n        // get the json data from the server message\r\n        var jobject = data as JToken;\r\n        \r\n        // get the number of users\r\n        var numUsers = jobject.Value\u003cint\u003e(\"numUsers\");\r\n        \r\n        // display the welcome message...\r\n    });\r\n    \r\n    // whenever the server emits \"new message\", update the chat body\r\n    socket.On(\"new message\", data =\u003e {\r\n        // get the json data from the server message\r\n        var jobject = data as JToken;\r\n        \r\n        // get the message data values\r\n        var username = jobject.Value\u003cstring\u003e(\"username\");\r\n        var message = jobject.Value\u003cstring\u003e(\"message\");\r\n        \r\n        // display message...\r\n    });\r\n\r\n## Send a Message\r\n\r\nSending a message to the server is just a single line of code that makes use of the \r\n`Emit` method:\r\n\r\n    // we can send messages to the server\r\n    socket.Emit(\"add user\", \"username\");\r\n    if (connected) {\r\n       socket.Emit(\"new message\", \"This is a message from Xamarin.Android...\");\r\n    }\r\n    \r\n    // or we can just send events\r\n    socket.Emit(\"typing\");\r\n    // cancel that typing event\r\n    socket.Emit(\"stop typing\");\r\n","Version":"0.9.13","Summary":"This is the Socket.IO Client Library for .NET.","QuickStart":"# Socket.IO .NET\r\n\r\nSocket.IO enables real-time bidirectional event-based communication.\r\nIt works on every platform, browser or device, focusing equally on reliability and speed.\r\n\r\n * **Real-time analytics**  \r\n   Push data to clients that gets represented as real-time counters, charts or logs.\r\n * **Instant messaging and chat**  \r\n   Socket.IO\u0027s \"Hello world\" is a chat app in just a few lines of code.\r\n * **Binary streaming**  \r\n   Starting in 1.0, it\u0027s possible to send any blob back and forth: image, audio, video.\r\n * **Document collaboration**  \r\n   Allow users to concurrently edit a document and see each other\u0027s changes.\r\n   \r\n\u003e **USED BY EVERYONE**  \r\n\u003e From Microsoft Office, Yammer, Zendesk, Trello... to hackathon winners and little startups.\r\n\r\n\u003e **IMMENSELY POWERFUL, YET EASY TO USE**  \r\n\u003e Our getting started guide will show you how to create lots of amazing applications in fewer \r\n\u003e than 200 lines of code.\r\n\r\n## Connect to Server\r\n\r\nConnecting to a Socket.IO server is just two lines:\r\n\r\n    // connect to a Socket.IO server\r\n    socket = IO.Socket(\"http://chat.socket.io/\");\r\n    socket.Connect();\r\n    \r\n    // disconnect from the server\r\n    socket.Close();\r\n\r\n## Subscribe to Events\r\n\r\nListening for messages from the server is easy,all we need to do is \r\nattach a delegate to the event name using the `On` method.\r\n\r\nThe `data` received from the http://chat.socket.io/ server is a `JToken` value:\r\n\r\n    // whenever the server emits \"login\", print the login message\r\n    socket.On(\"login\", data =\u003e {\r\n        connected = true;\r\n        \r\n        // get the json data from the server message\r\n        var jobject = data as JToken;\r\n        \r\n        // get the number of users\r\n        var numUsers = jobject.Value\u003cint\u003e(\"numUsers\");\r\n        \r\n        // display the welcome message...\r\n    });\r\n    \r\n    // whenever the server emits \"new message\", update the chat body\r\n    socket.On(\"new message\", data =\u003e {\r\n        // get the json data from the server message\r\n        var jobject = data as JToken;\r\n        \r\n        // get the message data values\r\n        var username = jobject.Value\u003cstring\u003e(\"username\");\r\n        var message = jobject.Value\u003cstring\u003e(\"message\");\r\n        \r\n        // display message...\r\n    });\r\n\r\n## Send a Message\r\n\r\nSending a message to the server is just a single line of code that makes use of the \r\n`Emit` method:\r\n\r\n    // we can send messages to the server\r\n    socket.Emit(\"add user\", \"username\");\r\n    if (connected) {\r\n       socket.Emit(\"new message\", \"This is a message from Xamarin.Android...\");\r\n    }\r\n    \r\n    // or we can just send events\r\n    socket.Emit(\"typing\");\r\n    // cancel that typing event\r\n    socket.Emit(\"stop typing\");\r\n","Hash":"ceeea0bd2b1a658fa92c4572df1584ae","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}